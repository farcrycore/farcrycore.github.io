<item>
	<title>FarCry inline request profiling &amp; logging</title>
	<link>http://farcry.posterous.com/farcry-inline-request-profiling-logging</link>
	<pubDate>Mon Aug 16 20:05:27 -0700 2010</pubDate>
	
	<dc:creator><![CDATA[Geoff Bowers]]></dc:creator>
	
	
		<category domain="tag" nicename="logging"><![CDATA[logging]]></category>
	
		<category domain="tag" nicename="performance"><![CDATA[performance]]></category>
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://farcry.posterous.com/farcry-inline-request-profiling-logging</guid>
	<description></description>
	<content:encoded><![CDATA[      Profiling code and logging output for a request is painful. It usually involves checking the IP address or URL variable to make sure only a developer sees it, and has to be outputed using cfdump/cfoutput followed by an abort.<p />  Blair has added support for profile=1. Just tack it onto the end of your URL when you are developing. (You'll need to wait for 6.0.6 <a href="https://farcry.jira.com/browse/FC-2330" class="moz-txt-link-freetext">https://farcry.jira.com/browse/FC-2330</a> or be running from the p600 maintenance branch)<p />  <div class='p_embed p_image_embed'>
<img alt="P_1" height="98" src="http://getfile7.posterous.com/getfile/files.posterous.com/farcry/3JgqRq1FUQ6X7AdgmTXRsRvEEePhsluAOWHtOjlG2aBJBkLuFQGsNtHmi91g/p_1.png" width="179" />
</div>
<p />  If the "tray menu" is showing (ie. you have logged into the webtop earlier with admin permmissions), this mode starts tracking calls to application.fapi.addProfilePoint(section,label) and application.fapi.addRequestLog(text).<p />  The profile functionality is a little bit primitive at this stage, but it's enough to show relative times between points. FarCry Core has a few points already in place to track request initialisation and view execution.<p />  <div class='p_embed p_image_embed'>
<a href="http://getfile1.posterous.com/getfile/files.posterous.com/farcry/xQHmJE5eI38x5VpJ9ghDXFbB0pLtClpRktmGvYuVX172DUW7BDH3Us1cAXwj/p_2.png"><img alt="P_2" height="130" src="http://getfile2.posterous.com/getfile/files.posterous.com/farcry/KCx9jKIkITJ2zJkuBcBSOWYxZeT5fwtIi0Q4IrTuc22arPQLeKsyAzjSynrP/p_2.png.scaled.500.jpg" width="500" /></a>
</div>
<p />  The logging is also simple; a list of strings. Timestamps are recorded but not outputed. Core has logging for cache hits and misses.<p />  <div class='p_embed p_image_embed'>
<a href="http://getfile6.posterous.com/getfile/files.posterous.com/farcry/jzrcoGPcqcBrIytR7wvHTUU5PcWvsFsBkzEHEHkamSBQJK5jIhsHJBQ42deD/p_3.png"><img alt="P_3" height="113" src="http://getfile7.posterous.com/getfile/files.posterous.com/farcry/d0MV7D3O9Vkq6zxfRRFLRaK3IE2GbDJlGunIPzlibMe2MK744QH2N7C7dYB4/p_3.png.scaled.500.jpg" width="500" /></a>
</div>
<p />  Enjoy!]]></content:encoded>
	<excerpt:encoded><![CDATA[Profiling code and logging output for a request is painful. It usually involves checking the IP address or URL variable to make sure only a developer sees it, and has to be outputed using cfdump/cfoutput followed by an abort. Blair has added suppo...]]></excerpt:encoded>	

	<wp:post_date>Mon Aug 16 20:05:27 -0700 2010</wp:post_date>
	<wp:post_date_gmt>%= display_date %></wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_name>farcry-inline-request-profiling-logging</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
</item>
