<item>
	<title>Loading CSS and JS libraries</title>
	<link>http://farcry.posterous.com/loading-css-and-js-libraries-tags-tags-javasc</link>
	<pubDate>Sun Jul 31 17:51:00 -0700 2011</pubDate>
	
	<dc:creator><![CDATA[Geoff Bowers]]></dc:creator>
	
	
		<category domain="tag" nicename="css"><![CDATA[css]]></category>
	
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
	
		<category domain="tag" nicename="tags"><![CDATA[tags]]></category>
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://farcry.posterous.com/loading-css-and-js-libraries-tags-tags-javasc</guid>
	<description></description>
	<content:encoded><![CDATA[<p>In dynamic CMS frameworks you often find yourself needing to load many different JavaScript or CSS libraries into a page. This becomes particularly complex when plugins enter the mix, needing to load libraries. In FarCry this problem is solved using skin:registerJS / skin:loadJS and skin:registerCSS / skin:loadCSS. The "load" tags tell FarCry to add libraries to a stack to be inserted into the head at the end of the request. The register tags make it easy to define a library in one place, then load them many places without redundant data. Added benefits of loadJS and loadCSS:<p /> </p>
<ul>
<li>automatically minification</li>
<li>de-duping - libraries with the same id are only loaded once</li>
<li>overriding libraries - you can override a library defined in a plugin by re-registering it in your project</li>
<li>inline code - code between the open and closing tags is added to the end of the library, even if no actual files are specified</li>
<li>including multiple files in a single library</li>
</ul>
<p><br />Here are some examples of how different libraries would be updated:</p>
<div><br />Example 1:&nbsp;
<div>&lt;link media="screen" rel="stylesheet" type="text/css" href="/css/960.css"&gt;</div>
<div>/yourproject/config/_serverSpecificVarsAfterInit.cfm:&nbsp;</div>
<div>&lt;skin:registerCSS id="960" baseHREF="/css" lFiles="960.css" /&gt;<br /> headerwebskin.cfm:&nbsp;</div>
<div>&lt;skin:loadCSS id="960" /&gt;<p />Example 2:&nbsp;</div>
<div>&lt;!--[if lt IE 7]&gt;</div>
<div>&lt;script type="text/javascript" src="/js/DD_belatedPNG_0.0.8a-min.js"&gt;&lt;/script&gt;</div>
<div>&lt;![endif]--&gt;<br />/yourproject/config/_serverSpecificVarsAfterInit.cfm:&nbsp;</div>
<div>&lt;skin:registerJS id="png" condition="lt IE 7" baseHREF="/js" lFiles="DD_belatedPNG_0.0.8a-min.js" /&gt;<br /> headerwebskin.cfm:&nbsp;</div>
<div>&lt;skin:loadJS id="png" /&gt;<p />Example 3:&nbsp;</div>
<div>&lt;script type="text/javascript" src="https://apis.google.com/js/plusone.js" &gt;&lt;/script&gt;<br /> /plusoneplugin/config/_serverSpecificVarsAfterInit.cfm:&nbsp;</div>
<div>&lt;skin:registerJS id="plusone" lFiles="<a href="https://apis.google.com/js/plusone.js">https://apis.google.com/js/plusone.js</a>" /&gt;<br /> plusonewebskin.cfm:&nbsp;</div>
<div>&lt;skin:loadJS id="plusone" /&gt;<p />If you look at a page's source now you will see HTML like this:<br />&lt;!--<br />ID: 960<br />FILES: /css/960.css<br />--&gt;<br />&lt;link rel="stylesheet" type="text/css" href="/cache/960--1309753095000-C3608969AFF7EA8450DDC43B11362F20-D41D8CD98F00B204E9800998ECF8427E-D41D8CD98F00B204E9800998ECF8427E.css" media="screen" &gt;<p /> <strong>Combining libraries into a single file</strong></div>
<div>Most web experts recommend that a website serve as few CSS and JS files as possible. FarCry's library loading functionality can take care of this too:</div>
<div><br />After converting all your libraries to use loadJS and loadCSS, review your source and make a note of the groups of files that can be combined. A typical example might be to combine jQuery with your site specific JavaScript.<p /> Register these combined libraries in /yourproject/config/_serverSpecificVarsAfterInit.cfm:<br />&lt;skin:registerJS id="combined-project" lCombineIDs="jquery,projectjs" /&gt;<p />Load this new library in your pages.<br /> &lt;skin:loadJS id="combined-project" /&gt;<p />If FarCry sees this combined library in the stack, it will automatically remove instances of it's child libraries.<p /><strong>Q&amp;A</strong><br />Q: Will the sequence of skin:loadJS calls be preserved by FarCry?<br /> A: Yes, though loading a combined library overrides the position of any libraries it contains. Looking back at the example, if combined-project is loaded then any other attempts to load projectjs will be ignored.<p />Q: Are combined libraries minified too?<br /> A: Yes. All CSS and JS libraries are minified.<p />Q: Can external libraries be combined with internal ones?<br />A: No, external libraries and internal libraries can't be mixed at this point.<p />Q: Are the media and condition attributes preserved in combined libraries?<br /> A: No, a combined library needs to redefine all of the relevant attributes, including media and condition.<p /><br />Cheers<br />Blair</div>
</div>]]></content:encoded>
	<excerpt:encoded><![CDATA[In dynamic CMS frameworks you often find yourself needing to load many different JavaScript or CSS libraries into a page. This becomes particularly complex when plugins enter the mix, needing to load libraries. In FarCry this problem is solved usi...]]></excerpt:encoded>	

	<wp:post_date>Sun Jul 31 17:51:00 -0700 2011</wp:post_date>
	<wp:post_date_gmt>%= display_date %></wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_name>loading-css-and-js-libraries-tags-tags-javasc</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
		<wp:comment>
			<!-- <wp:comment_id>5</wp:comment_id> -->
			<wp:comment_author><![CDATA[Geoffrey Bowers]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>Sun Jul 31 20:30:04 -0700 2011</wp:comment_date>
			<wp:comment_date_gmt>Sun Jul 31 20:30:04 -0700 2011</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have added this to the tutorial section of the WIKI with a few amendments -- thanks Blair, great article.

Loading Javascript &amp; CSS Libraries
https://farcry.jira.com/wiki/pages/viewpage.action?pageId=16875543]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
		</wp:comment>
	
</item>
